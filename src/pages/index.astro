---
import BaseLayout from "../layouts/BaseLayout.astro";
import TimerForm from "../components/TimerForm.astro";
---

<BaseLayout
  title="サブマリンボイジャー設定画面｜FF14 サブマリンボイジャー時間管理ツール"
>
  <h1>FF14 サブマリンボイジャー設定画面</h1>
  <p>
    4隻まで登録できます。「残り時間」か「帰還予定時刻」を選択・入力して、「運行状況を表示」を押してください。<br
    />再設定の場合、時刻が過ぎている場合はリセットされています。
  </p>
  <div id="submarines">
    <TimerForm id={1} />
    <TimerForm id={2} />
    <TimerForm id={3} />
    <TimerForm id={4} />
  </div>

  <button id="generate-url">運行状況を表示</button>
  <p id="generated-url"></p>

  <script type="module">
    function calculateTimestamp(method, days, hours, minutes, absoluteTime) {
      if (method === "absolute") {
        return absoluteTime ? new Date(absoluteTime).getTime() : null;
      }

      const totalMilliseconds =
        (days || 0) * 86400000 +
        (hours || 0) * 3600000 +
        (minutes || 0) * 60000;

      return totalMilliseconds > 0 ? Date.now() + totalMilliseconds : null;
    }

    function setFormValuesFromParams() {
      const urlParams = new URLSearchParams(window.location.search);
      for (let i = 1; i <= 4; i++) {
        const time = urlParams.get(`time${i}`);
        // パラメータがある場合はフォームにセット
        if (time) {
          const date = new Date(parseInt(time));
          const now = Date.now();
          const timeLeft = parseInt(time) - now;

          if (timeLeft > 0) {
            const days = Math.floor(timeLeft / 86400000);
            const hours = Math.floor((timeLeft % 86400000) / 3600000);
            const minutes = Math.floor((timeLeft % 3600000) / 60000);
            document.getElementById(`days-${i}`).value = days;
            document.getElementById(`hours-${i}`).value = hours;
            document.getElementById(`minutes-${i}`).value = minutes;
            document.querySelector(
              `input[name="method${i}"][value="relative"]`
            ).checked = true;
            // 日本のローカル時間に変換してdatetime-localフィールドに設定
            const localDateTime = new Date(
              date.getTime() - date.getTimezoneOffset() * 60000
            )
              .toISOString()
              .slice(0, 16);
            document.getElementById(`absolute-time-${i}`).value = localDateTime;
          } else {
            // パラメータが過去の日時だった場合はリセット
            document.getElementById(`days-${i}`).value = "";
            document.getElementById(`hours-${i}`).value = "";
            document.getElementById(`minutes-${i}`).value = "";
            document.querySelector(
              `input[name="method${i}"][value="relative"]`
            ).checked = true;
            document.getElementById(`absolute-time-${i}`).value = "";
          }
        }
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      setFormValuesFromParams();

      document.getElementById("generate-url").addEventListener("click", () => {
        let params = [];
        let hasInput = false;

        for (let i = 1; i <= 4; i++) {
          let method = document.querySelector(
            `input[name="method${i}"]:checked`
          )?.value;
          let days = parseInt(
            document.getElementById(`days-${i}`)?.value || "0"
          );
          let hours = parseInt(
            document.getElementById(`hours-${i}`)?.value || "0"
          );
          let minutes = parseInt(
            document.getElementById(`minutes-${i}`)?.value || "0"
          );
          let absoluteTime = document.getElementById(
            `absolute-time-${i}`
          )?.value;

          const timestamp = calculateTimestamp(
            method,
            days,
            hours,
            minutes,
            absoluteTime
          );

          if (timestamp) {
            params.push(`time${i}=${timestamp}`);
            hasInput = true;
          }
        }

        if (!hasInput) {
          alert("入力してください！");
          return;
        }

        let generatedURL = `/timer?${params.join("&")}`;
        window.location.href = generatedURL;
      });
    });
  </script>
</BaseLayout>
